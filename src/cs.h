/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CS_H_RPCGEN
#define _CS_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define PATH_BUF 1024
#define DIR_BUF 30
#define CHUNK_BUF 1024
#define AUTH_BUF 256

struct dnfs_stat {
	uint64_t s_ino;
	uint32_t s_mode;
	uint16_t s_chunks;
	uint16_t s_copies;
	uint64_t s_nlink;
	uint32_t s_uid;
	uint32_t s_gid;
	uint64_t s_rdev;
	uint64_t s_size;
	uint64_t s_blocks;
	uint64_t s_atime;
	uint64_t s_mtime;
	uint64_t s_ctime;
};
typedef struct dnfs_stat dnfs_stat;

struct chunk_info {
	uint32_t ip;
	uint32_t bip;
};
typedef struct chunk_info chunk_info;

struct dnfs_dir {
	uint64_t d_ino;
	uint8_t d_type;
	char d_name[PATH_BUF];
};
typedef struct dnfs_dir dnfs_dir;

struct cs_getattr_in {
	char *path;
};
typedef struct cs_getattr_in cs_getattr_in;

struct cs_getattr_out {
	dnfs_stat st;
	int err;
};
typedef struct cs_getattr_out cs_getattr_out;

struct cs_access_in {
	char *path;
	int mode;
};
typedef struct cs_access_in cs_access_in;

struct cs_access_out {
	int err;
};
typedef struct cs_access_out cs_access_out;

struct cs_mkdir_in {
	char *path;
	u_int mode;
};
typedef struct cs_mkdir_in cs_mkdir_in;

struct cs_mkdir_out {
	int err;
};
typedef struct cs_mkdir_out cs_mkdir_out;

struct cs_rmdir_in {
	char *path;
};
typedef struct cs_rmdir_in cs_rmdir_in;

struct cs_rmdir_out {
	int err;
};
typedef struct cs_rmdir_out cs_rmdir_out;

struct cs_readdir_in {
	char *path;
	u_long dp;
};
typedef struct cs_readdir_in cs_readdir_in;

struct cs_readdir_out {
	struct {
		u_int dirs_len;
		dnfs_dir *dirs_val;
	} dirs;
	u_long dp;
	int err;
};
typedef struct cs_readdir_out cs_readdir_out;

struct cs_mknod_in {
	char *path;
	u_int mode;
};
typedef struct cs_mknod_in cs_mknod_in;

struct cs_mknod_out {
	int err;
};
typedef struct cs_mknod_out cs_mknod_out;

struct cs_setwflag_in {
	char *path;
	int promote;
};
typedef struct cs_setwflag_in cs_setwflag_in;

struct cs_setwflag_out {
	int err;
};
typedef struct cs_setwflag_out cs_setwflag_out;

struct cs_open_in {
	char *path;
	u_int mode;
};
typedef struct cs_open_in cs_open_in;

struct cs_open_out {
	uint64_t ino;
	uint64_t size;
	struct {
		u_int chunks_len;
		chunk_info *chunks_val;
	} chunks;
	int err;
};
typedef struct cs_open_out cs_open_out;

struct cs_newchunk_in {
	char *path;
};
typedef struct cs_newchunk_in cs_newchunk_in;

struct cs_newchunk_out {
	chunk_info chunk;
	int err;
};
typedef struct cs_newchunk_out cs_newchunk_out;

struct cs_release_in {
	char *path;
	uint64_t size;
};
typedef struct cs_release_in cs_release_in;

struct cs_release_out {
	int err;
};
typedef struct cs_release_out cs_release_out;

struct cs_truncate_in {
	char *path;
	uint64_t size;
};
typedef struct cs_truncate_in cs_truncate_in;

struct cs_truncate_out {
	int err;
};
typedef struct cs_truncate_out cs_truncate_out;

struct cs_getlist_in {
	char *path;
};
typedef struct cs_getlist_in cs_getlist_in;

struct cs_getlist_out {
	uint64_t ino;
	struct {
		u_int chunks_len;
		chunk_info *chunks_val;
	} chunks;
	int err;
};
typedef struct cs_getlist_out cs_getlist_out;

struct cs_unlink_in {
	char *path;
};
typedef struct cs_unlink_in cs_unlink_in;

struct cs_unlink_out {
	int err;
};
typedef struct cs_unlink_out cs_unlink_out;

struct cs_chown_in {
	char *path;
	u_int owner;
	u_int group;
};
typedef struct cs_chown_in cs_chown_in;

struct cs_chown_out {
	int err;
};
typedef struct cs_chown_out cs_chown_out;

struct cs_chmod_in {
	char *path;
	u_int mode;
};
typedef struct cs_chmod_in cs_chmod_in;

struct cs_chmod_out {
	int err;
};
typedef struct cs_chmod_out cs_chmod_out;

struct cs_statfs_in {
	char *path;
};
typedef struct cs_statfs_in cs_statfs_in;

struct cs_statfs_out {
	uint32_t f_blocks;
	uint32_t f_bavail;
	uint32_t f_bsize;
	int err;
};
typedef struct cs_statfs_out cs_statfs_out;

struct cs_auth_in {
	char *user;
	char *passwd;
};
typedef struct cs_auth_in cs_auth_in;

struct cs_auth_out {
	int err;
};
typedef struct cs_auth_out cs_auth_out;

struct os_heart_in {
	uint32_t total;
	uint32_t avail;
};
typedef struct os_heart_in os_heart_in;

struct os_heart_out {
	int err;
};
typedef struct os_heart_out os_heart_out;

#define CS_PROG 0x31230001
#define CS_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define cs_getattr 1
extern  enum clnt_stat cs_getattr_1(cs_getattr_in *, cs_getattr_out *, CLIENT *);
extern  bool_t cs_getattr_1_svc(cs_getattr_in *, cs_getattr_out *, struct svc_req *);
#define cs_access 2
extern  enum clnt_stat cs_access_1(cs_access_in *, cs_access_out *, CLIENT *);
extern  bool_t cs_access_1_svc(cs_access_in *, cs_access_out *, struct svc_req *);
#define cs_mkdir 3
extern  enum clnt_stat cs_mkdir_1(cs_mkdir_in *, cs_mkdir_out *, CLIENT *);
extern  bool_t cs_mkdir_1_svc(cs_mkdir_in *, cs_mkdir_out *, struct svc_req *);
#define cs_rmdir 4
extern  enum clnt_stat cs_rmdir_1(cs_rmdir_in *, cs_rmdir_out *, CLIENT *);
extern  bool_t cs_rmdir_1_svc(cs_rmdir_in *, cs_rmdir_out *, struct svc_req *);
#define cs_readdir 5
extern  enum clnt_stat cs_readdir_1(cs_readdir_in *, cs_readdir_out *, CLIENT *);
extern  bool_t cs_readdir_1_svc(cs_readdir_in *, cs_readdir_out *, struct svc_req *);
#define cs_mknod 6
extern  enum clnt_stat cs_mknod_1(cs_mknod_in *, cs_mknod_out *, CLIENT *);
extern  bool_t cs_mknod_1_svc(cs_mknod_in *, cs_mknod_out *, struct svc_req *);
#define cs_open 7
extern  enum clnt_stat cs_open_1(cs_open_in *, cs_open_out *, CLIENT *);
extern  bool_t cs_open_1_svc(cs_open_in *, cs_open_out *, struct svc_req *);
#define cs_newchunk 8
extern  enum clnt_stat cs_newchunk_1(cs_newchunk_in *, cs_newchunk_out *, CLIENT *);
extern  bool_t cs_newchunk_1_svc(cs_newchunk_in *, cs_newchunk_out *, struct svc_req *);
#define cs_release 9
extern  enum clnt_stat cs_release_1(cs_release_in *, cs_release_out *, CLIENT *);
extern  bool_t cs_release_1_svc(cs_release_in *, cs_release_out *, struct svc_req *);
#define cs_unlink 10
extern  enum clnt_stat cs_unlink_1(cs_unlink_in *, cs_unlink_out *, CLIENT *);
extern  bool_t cs_unlink_1_svc(cs_unlink_in *, cs_unlink_out *, struct svc_req *);
#define cs_truncate 11
extern  enum clnt_stat cs_truncate_1(cs_truncate_in *, cs_truncate_out *, CLIENT *);
extern  bool_t cs_truncate_1_svc(cs_truncate_in *, cs_truncate_out *, struct svc_req *);
#define cs_chown 12
extern  enum clnt_stat cs_chown_1(cs_chown_in *, cs_chown_out *, CLIENT *);
extern  bool_t cs_chown_1_svc(cs_chown_in *, cs_chown_out *, struct svc_req *);
#define cs_chmod 13
extern  enum clnt_stat cs_chmod_1(cs_chmod_in *, cs_chmod_out *, CLIENT *);
extern  bool_t cs_chmod_1_svc(cs_chmod_in *, cs_chmod_out *, struct svc_req *);
#define cs_statfs 14
extern  enum clnt_stat cs_statfs_1(cs_statfs_in *, cs_statfs_out *, CLIENT *);
extern  bool_t cs_statfs_1_svc(cs_statfs_in *, cs_statfs_out *, struct svc_req *);
#define cs_getlist 15
extern  enum clnt_stat cs_getlist_1(cs_getlist_in *, cs_getlist_out *, CLIENT *);
extern  bool_t cs_getlist_1_svc(cs_getlist_in *, cs_getlist_out *, struct svc_req *);
#define cs_setwflag 16
extern  enum clnt_stat cs_setwflag_1(cs_setwflag_in *, cs_setwflag_out *, CLIENT *);
extern  bool_t cs_setwflag_1_svc(cs_setwflag_in *, cs_setwflag_out *, struct svc_req *);
#define cs_auth 17
extern  enum clnt_stat cs_auth_1(cs_auth_in *, cs_auth_out *, CLIENT *);
extern  bool_t cs_auth_1_svc(cs_auth_in *, cs_auth_out *, struct svc_req *);
extern int cs_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define cs_getattr 1
extern  enum clnt_stat cs_getattr_1();
extern  bool_t cs_getattr_1_svc();
#define cs_access 2
extern  enum clnt_stat cs_access_1();
extern  bool_t cs_access_1_svc();
#define cs_mkdir 3
extern  enum clnt_stat cs_mkdir_1();
extern  bool_t cs_mkdir_1_svc();
#define cs_rmdir 4
extern  enum clnt_stat cs_rmdir_1();
extern  bool_t cs_rmdir_1_svc();
#define cs_readdir 5
extern  enum clnt_stat cs_readdir_1();
extern  bool_t cs_readdir_1_svc();
#define cs_mknod 6
extern  enum clnt_stat cs_mknod_1();
extern  bool_t cs_mknod_1_svc();
#define cs_open 7
extern  enum clnt_stat cs_open_1();
extern  bool_t cs_open_1_svc();
#define cs_newchunk 8
extern  enum clnt_stat cs_newchunk_1();
extern  bool_t cs_newchunk_1_svc();
#define cs_release 9
extern  enum clnt_stat cs_release_1();
extern  bool_t cs_release_1_svc();
#define cs_unlink 10
extern  enum clnt_stat cs_unlink_1();
extern  bool_t cs_unlink_1_svc();
#define cs_truncate 11
extern  enum clnt_stat cs_truncate_1();
extern  bool_t cs_truncate_1_svc();
#define cs_chown 12
extern  enum clnt_stat cs_chown_1();
extern  bool_t cs_chown_1_svc();
#define cs_chmod 13
extern  enum clnt_stat cs_chmod_1();
extern  bool_t cs_chmod_1_svc();
#define cs_statfs 14
extern  enum clnt_stat cs_statfs_1();
extern  bool_t cs_statfs_1_svc();
#define cs_getlist 15
extern  enum clnt_stat cs_getlist_1();
extern  bool_t cs_getlist_1_svc();
#define cs_setwflag 16
extern  enum clnt_stat cs_setwflag_1();
extern  bool_t cs_setwflag_1_svc();
#define cs_auth 17
extern  enum clnt_stat cs_auth_1();
extern  bool_t cs_auth_1_svc();
extern int cs_prog_1_freeresult ();
#endif /* K&R C */

#define OS_PROG 0x31230003
#define OS_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define os_heart 1
extern  enum clnt_stat os_heart_1(os_heart_in *, os_heart_out *, CLIENT *);
extern  bool_t os_heart_1_svc(os_heart_in *, os_heart_out *, struct svc_req *);
extern int os_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define os_heart 1
extern  enum clnt_stat os_heart_1();
extern  bool_t os_heart_1_svc();
extern int os_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_dnfs_stat (XDR *, dnfs_stat*);
extern  bool_t xdr_chunk_info (XDR *, chunk_info*);
extern  bool_t xdr_dnfs_dir (XDR *, dnfs_dir*);
extern  bool_t xdr_cs_getattr_in (XDR *, cs_getattr_in*);
extern  bool_t xdr_cs_getattr_out (XDR *, cs_getattr_out*);
extern  bool_t xdr_cs_access_in (XDR *, cs_access_in*);
extern  bool_t xdr_cs_access_out (XDR *, cs_access_out*);
extern  bool_t xdr_cs_mkdir_in (XDR *, cs_mkdir_in*);
extern  bool_t xdr_cs_mkdir_out (XDR *, cs_mkdir_out*);
extern  bool_t xdr_cs_rmdir_in (XDR *, cs_rmdir_in*);
extern  bool_t xdr_cs_rmdir_out (XDR *, cs_rmdir_out*);
extern  bool_t xdr_cs_readdir_in (XDR *, cs_readdir_in*);
extern  bool_t xdr_cs_readdir_out (XDR *, cs_readdir_out*);
extern  bool_t xdr_cs_mknod_in (XDR *, cs_mknod_in*);
extern  bool_t xdr_cs_mknod_out (XDR *, cs_mknod_out*);
extern  bool_t xdr_cs_setwflag_in (XDR *, cs_setwflag_in*);
extern  bool_t xdr_cs_setwflag_out (XDR *, cs_setwflag_out*);
extern  bool_t xdr_cs_open_in (XDR *, cs_open_in*);
extern  bool_t xdr_cs_open_out (XDR *, cs_open_out*);
extern  bool_t xdr_cs_newchunk_in (XDR *, cs_newchunk_in*);
extern  bool_t xdr_cs_newchunk_out (XDR *, cs_newchunk_out*);
extern  bool_t xdr_cs_release_in (XDR *, cs_release_in*);
extern  bool_t xdr_cs_release_out (XDR *, cs_release_out*);
extern  bool_t xdr_cs_truncate_in (XDR *, cs_truncate_in*);
extern  bool_t xdr_cs_truncate_out (XDR *, cs_truncate_out*);
extern  bool_t xdr_cs_getlist_in (XDR *, cs_getlist_in*);
extern  bool_t xdr_cs_getlist_out (XDR *, cs_getlist_out*);
extern  bool_t xdr_cs_unlink_in (XDR *, cs_unlink_in*);
extern  bool_t xdr_cs_unlink_out (XDR *, cs_unlink_out*);
extern  bool_t xdr_cs_chown_in (XDR *, cs_chown_in*);
extern  bool_t xdr_cs_chown_out (XDR *, cs_chown_out*);
extern  bool_t xdr_cs_chmod_in (XDR *, cs_chmod_in*);
extern  bool_t xdr_cs_chmod_out (XDR *, cs_chmod_out*);
extern  bool_t xdr_cs_statfs_in (XDR *, cs_statfs_in*);
extern  bool_t xdr_cs_statfs_out (XDR *, cs_statfs_out*);
extern  bool_t xdr_cs_auth_in (XDR *, cs_auth_in*);
extern  bool_t xdr_cs_auth_out (XDR *, cs_auth_out*);
extern  bool_t xdr_os_heart_in (XDR *, os_heart_in*);
extern  bool_t xdr_os_heart_out (XDR *, os_heart_out*);

#else /* K&R C */
extern bool_t xdr_dnfs_stat ();
extern bool_t xdr_chunk_info ();
extern bool_t xdr_dnfs_dir ();
extern bool_t xdr_cs_getattr_in ();
extern bool_t xdr_cs_getattr_out ();
extern bool_t xdr_cs_access_in ();
extern bool_t xdr_cs_access_out ();
extern bool_t xdr_cs_mkdir_in ();
extern bool_t xdr_cs_mkdir_out ();
extern bool_t xdr_cs_rmdir_in ();
extern bool_t xdr_cs_rmdir_out ();
extern bool_t xdr_cs_readdir_in ();
extern bool_t xdr_cs_readdir_out ();
extern bool_t xdr_cs_mknod_in ();
extern bool_t xdr_cs_mknod_out ();
extern bool_t xdr_cs_setwflag_in ();
extern bool_t xdr_cs_setwflag_out ();
extern bool_t xdr_cs_open_in ();
extern bool_t xdr_cs_open_out ();
extern bool_t xdr_cs_newchunk_in ();
extern bool_t xdr_cs_newchunk_out ();
extern bool_t xdr_cs_release_in ();
extern bool_t xdr_cs_release_out ();
extern bool_t xdr_cs_truncate_in ();
extern bool_t xdr_cs_truncate_out ();
extern bool_t xdr_cs_getlist_in ();
extern bool_t xdr_cs_getlist_out ();
extern bool_t xdr_cs_unlink_in ();
extern bool_t xdr_cs_unlink_out ();
extern bool_t xdr_cs_chown_in ();
extern bool_t xdr_cs_chown_out ();
extern bool_t xdr_cs_chmod_in ();
extern bool_t xdr_cs_chmod_out ();
extern bool_t xdr_cs_statfs_in ();
extern bool_t xdr_cs_statfs_out ();
extern bool_t xdr_cs_auth_in ();
extern bool_t xdr_cs_auth_out ();
extern bool_t xdr_os_heart_in ();
extern bool_t xdr_os_heart_out ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CS_H_RPCGEN */
